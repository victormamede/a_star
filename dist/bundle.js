!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class s{constructor(t){this.directions=[[!0,!0,!0],[!0,!1,!0],[!0,!0,!0]],this.squareSize=40;const e=document.createElement("canvas");e.width=3*this.squareSize,e.height=3*this.squareSize,t.appendChild(e),e.addEventListener("mousedown",this.onClick.bind(this)),this.canvas=e,this.drawer=new n(this),this.drawer.draw()}onClick(t){const e=Math.floor(t.offsetX/this.squareSize),i=Math.floor(t.offsetY/this.squareSize);1===e&&1===i||(this.directions[i][e]=!this.directions[i][e],this.drawer.draw(),console.log(this))}getDirections(){let t=[];for(let e=0;e<3;e++)for(let i=0;i<3;i++)this.directions[i][e]&&t.push({x:e-1,y:i-1});return t}}class n{constructor(t){this.parent=t,this.ctx=t.canvas.getContext("2d")}draw(){const t=this.ctx;t.fillStyle="white",t.fillRect(0,0,t.canvas.width,t.canvas.height),t.beginPath(),t.strokeStyle="black",t.lineWidth=1;for(let e=0;e<4;e++)t.moveTo(e*this.parent.squareSize,0),t.lineTo(e*this.parent.squareSize,t.canvas.height);for(let e=0;e<4;e++)t.moveTo(0,e*this.parent.squareSize),t.lineTo(t.canvas.width,e*this.parent.squareSize);t.stroke(),t.fillStyle="blue",t.beginPath(),t.arc(t.canvas.width/2,t.canvas.height/2,this.parent.squareSize/3,0,360),t.fill(),this.parent.getDirections().forEach(e=>{const i={x:t.canvas.width/2+e.x*this.parent.squareSize,y:t.canvas.height/2+e.y*this.parent.squareSize};t.fillStyle="red",t.beginPath(),t.arc(i.x,i.y,this.parent.squareSize/4,0,360),t.fill()})}}var a=function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{h(s.next(t))}catch(t){a(t)}}function o(t){try{h(s.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}h((s=s.apply(t,e||[])).next())}))};class r{constructor(t,e){this.board=t,this.maxStep=100,this.minStep=0,this.stepInterval=50,this.open=[],this.closed=[],this.endNode=null,this.breakAll=null,this.possibleMoves=new s(document.getElementById("possible-moves-selector"));const i=document.createElement("input");i.type="range",i.className="custom-range",i.min=String(this.minStep),i.max=String(this.maxStep),i.value=String(this.stepInterval),i.addEventListener("change",t=>{this.stepInterval=+t.target.value});const n=document.createElement("label");n.innerHTML="Speed",n.appendChild(i),e.appendChild(n)}start(){this.calculate().then(t=>this.endNode=t)}draw(t,e){e.lineWidth=this.board.squareSize/4,e.lineCap="round",e.fillStyle="rgba(100, 100, 100, 0.2)",this.closed.forEach(i=>i.drawBox(t,e)),e.fillStyle="rgba(0, 32, 255, 0.2)",this.open.forEach(i=>i.drawBox(t,e)),e.strokeStyle="red",e.lineWidth=this.board.squareSize/3,null!=this.endNode&&this.endNode.drawLine(t,e)}calculate(){return a(this,void 0,void 0,(function*(){null!=this.breakAll&&this.breakAll();let t=!1;new Promise(t=>this.breakAll=t).then(()=>{t=!0});const[e,i]=this.board.findStartNode(),[s,n]=this.board.findEndNode();if(this.open=[],this.closed=[],this.endNode=null,null==i||null==n)return null;this.open.push(new o(this,i.pos));for(let e=0;e<1e3;e++){if(t)return null;yield new Promise(t=>setTimeout(t,this.maxStep-this.stepInterval));const[e,i]=this.lowestFInOpenList(n.pos);if(null==i)break;if(this.closed.push(i),this.open.splice(e,1),i.pos.x===n.pos.x&&i.pos.y===n.pos.y)return i;this.possibleMoves.getDirections().forEach(t=>{this.checkDirection(i,t)})}return this.breakAll=null,null}))}checkDirection(t,e){const i={x:e.x+t.pos.x,y:e.y+t.pos.y},[s,n]=this.board.getNode(i);if((null==n?void 0:n.stepMultiplier)===1/0)return;if(this.board.isOutOfBounds(i))return;if(null!=this.inClosedList(i)[1])return;const[a,r]=this.inOpenList(i);if(null!=r){if(!(t.distanceFromStart<r.distanceFromStart))return;this.open.splice(a,1)}const h=new o(this,i);h.parentNode=t;let l=t.distanceFromStart;return l+=null!=n?n.stepMultiplier:1,h.distanceFromStart=l,this.open.push(h),h}lowestFInOpenList(t){if(0===this.open.length)return[-1,void 0];let e=0,i=this.open[e].calculateF(t);return this.open.forEach((s,n)=>{const a=s.calculateF(t);a<i&&(e=n,i=a)}),[e,this.open[e]]}inOpenList(t){const e=this.open.findIndex(e=>e.pos.x===t.x&&e.pos.y===t.y);return[e,this.open[e]]}inClosedList(t){const e=this.closed.findIndex(e=>e.pos.x===t.x&&e.pos.y===t.y);return[e,this.closed[e]]}}class o{constructor(t,e){this.parent=t,this.distanceFromStart=0,this.parentNode=null,this.animationFrame=0,this.pos=Object.assign({},e),this.lineDrawer=new h(this),this.boxDrawer=new l(this)}calculateF(t){const e=Math.pow(t.x-this.pos.x,2)+Math.pow(t.y-this.pos.y,2);return Math.sqrt(e)+this.distanceFromStart}drawLine(t,e){this.lineDrawer.draw(t,e)}drawBox(t,e){this.boxDrawer.draw(t,e)}}class h{constructor(t){this.parent=t,this.animationFrame=0}trace(t,e){if(null==this.parent)return;if(null==this.parent.parentNode)return;const i=this.parent.parentNode.pos,s=this.parent.parent.board.squareSize,n=Math.max(this.parent.parent.maxStep-this.parent.parent.stepInterval,.01);this.animationFrame=Math.min(n,this.animationFrame);const a=this.animationFrame/n;e.lineTo(((1-a)*this.parent.pos.x+i.x*a)*s+s/2,((1-a)*this.parent.pos.y+i.y*a)*s+s/2),this.animationFrame<n?this.animationFrame+=t:this.parent.parentNode.lineDrawer.trace(t,e)}draw(t,e){const i=this.parent.parent.board.squareSize;null!=this.parent.parentNode&&(e.beginPath(),e.moveTo(this.parent.pos.x*i+i/2,this.parent.pos.y*i+i/2),this.parent.lineDrawer.trace(t,e),e.stroke())}}class l{constructor(t){this.parent=t,this.animationFrame=0,this.fallDownTime=100,this.animationTime=1e3}draw(t,e){const i=this.parent.parent.board.squareSize,s=this.parent.pos;this.animationFrame<this.animationTime&&(this.animationFrame+=t,this.animationFrame=Math.min(this.animationFrame,this.animationTime));const n=Math.min(1,this.animationFrame/this.fallDownTime),a=this.animationFrame/this.animationTime;e.fillStyle="rgba(150, 0, 255, "+(1.2-a),e.fillRect(s.x*i-i/4*(1-n),s.y*i-i/4*(1-n),i,i)}}class c{constructor(){this.board=null,this.stepMultiplier=1/0}enter(t){this.board=t}}class d{constructor(t,e){this.from=t,this.to=e,this.animationFrame=0,this.animationTime=1e3,this.animationTime=1300*Math.random()+200}draw(t,e){this.animationFrame<this.animationTime&&(this.animationFrame+=t,this.animationFrame=Math.min(this.animationTime,this.animationFrame));const i=this.animationFrame/this.animationTime;e.lineWidth=1,e.strokeStyle=`rgba(0, 0, 0, ${.5*i})`,e.beginPath(),e.moveTo(this.from.x,this.from.y),e.lineTo((1-i)*this.from.x+i*this.to.x,(1-i)*this.from.y+i*this.to.y),e.stroke()}}class m extends c{constructor(t){super(),this.type="wall",this.pos=t,this.animator=new u(this)}draw(t,e){this.animator.draw(t,e)}}class u{constructor(t){this.parent=t,this.animationFrame=0,this.animationTime=100}draw(t,e){if(null==this.parent.board)return;this.animationFrame<this.animationTime&&(this.animationFrame+=t,this.animationFrame=Math.min(this.animationTime,this.animationFrame));const i=this.animationFrame/this.animationTime,s=this.parent.pos,n=this.parent.board.squareSize;e.fillStyle="black",e.fillRect(s.x*n-n/4*(1-i),s.y*n-n/4*(1-i),n,n)}}class p extends c{constructor(t){super(),this.type="start",this.stepMultiplier=1,this.pos=t,this.animator=new f(this)}enter(t){this.board=t;const[e]=this.board.findStartNode();e>=0&&this.board.nodes.splice(e,1)}draw(t,e){this.animator.draw(t,e)}}class f{constructor(t){this.parent=t,this.animationFrame=0,this.animationTime=4e3}draw(t,e){if(null==this.parent.board)return;this.animationFrame+=t,this.animationFrame%=this.animationTime;const i=this.animationFrame/this.animationTime,s=this.parent.pos,n=this.parent.board.squareSize;e.fillStyle="green",e.lineWidth=1,e.strokeStyle="black";const a=[{x:.4,y:.8},{x:.6,y:.8},{x:.6,y:.2},{x:.4,y:.2},{x:.4,y:.25},{x:.2+.1*Math.sin(i*Math.PI*2),y:.4+.05*Math.abs(Math.cos(i*Math.PI*2))},{x:.4,y:.55}].map(t=>{return{x:((e=t).x+s.x)*n,y:(e.y+s.y)*n};var e});e.beginPath(),e.moveTo(a[0].x,a[0].y),a.forEach(t=>{e.lineTo(t.x,t.y)}),e.closePath(),e.fill(),e.stroke()}}class y extends c{constructor(t){super(),this.type="end",this.stepMultiplier=1,this.pos=t,this.animator=new x(this)}enter(t){this.board=t;const[e]=this.board.findEndNode();e>=0&&this.board.nodes.splice(e,1)}draw(t,e){this.animator.draw(t,e)}}class x{constructor(t){this.parent=t,this.animationFrame=0,this.animationTime=4e3}draw(t,e){if(null==this.parent.board)return;this.animationFrame+=t,this.animationFrame%=this.animationTime;const i=this.animationFrame/this.animationTime,s=this.parent.pos,n=this.parent.board.squareSize;e.fillStyle="red",e.lineWidth=1,e.strokeStyle="black";const a=[{x:.4,y:.8},{x:.6,y:.8},{x:.6,y:.2},{x:.4,y:.2},{x:.4,y:.25},{x:.2+.1*Math.sin(i*Math.PI*2),y:.4+.05*Math.abs(Math.cos(i*Math.PI*2))},{x:.4,y:.55}].map(t=>{return{x:((e=t).x+s.x)*n,y:(e.y+s.y)*n};var e});e.beginPath(),e.moveTo(a[0].x,a[0].y),a.forEach(t=>{e.lineTo(t.x,t.y)}),e.closePath(),e.fill(),e.stroke()}}class w extends c{constructor(t){super(),this.type="water",this.stepMultiplier=2,this.pos=t,this.animator=new b(this)}draw(t,e){this.animator.draw(t,e)}}class b{constructor(t){this.parent=t,this.animationFrame=0,this.animationTime=100}draw(t,e){if(null==this.parent.board)return;this.animationFrame<this.animationTime&&(this.animationFrame+=t,this.animationFrame=Math.min(this.animationTime,this.animationFrame));const i=this.animationFrame/this.animationTime,s=this.parent.pos,n=this.parent.board.squareSize;e.fillStyle="rgba(0, 100, 150, 0.6)",e.fillRect(s.x*n-n/4*(1-i),s.y*n-n/4*(1-i),n,n)}}class S extends class extends class{}{constructor(t){super(),this.size=t,this.squareSize=32,this.boardLines=[],this.nodes=[],this.addLines(),this.pathFinder=new r(this,document.getElementById("speed-selector"))}addLines(){for(let t=0;t<this.size.x+1;t++)this.boardLines.push(new d({x:t*this.squareSize,y:0},{x:t*this.squareSize,y:this.size.y*this.squareSize}));for(let t=0;t<this.size.y+1;t++)this.boardLines.push(new d({x:0,y:t*this.squareSize},{x:this.size.x*this.squareSize,y:t*this.squareSize}))}addNode(t){const[e]=this.getNode(t.pos);e>=0||this.isOutOfBounds(t.pos)||(t.enter(this),this.nodes.push(t))}getNode(t){const e=this.nodes.findIndex(e=>e.pos.x===t.x&&e.pos.y===t.y);return[e,this.nodes[e]]}isOutOfBounds(t){return t.x>=this.size.x||t.x<0||t.y>=this.size.y||t.y<0}findStartNode(){const t=this.nodes.findIndex(t=>"start"===t.type);return[t,this.nodes[t]]}findEndNode(){const t=this.nodes.findIndex(t=>"end"===t.type);return[t,this.nodes[t]]}draw(t,e){this.pathFinder.draw(t,e),this.boardLines.forEach(i=>i.draw(t,e)),this.nodes.forEach(i=>i.draw(t,e))}}{constructor(t){super(t),this.currentKey="",this.factories={start:{label:"Start Point",factory:t=>new p(t)},end:{label:"End Point",factory:t=>new y(t)},wall:{label:"Wall",factory:t=>new m(t)},water:{label:"Water",factory:t=>new w(t)}};const e=document.getElementById("toplace-selector");if(null!=e)for(let t of Object.keys(this.factories)){const i=document.createElement("input");i.type="radio",i.name="toplace",i.id="toplace-"+t,i.className="custom-control-input",i.addEventListener("change",()=>{this.currentKey=t});const s=document.createElement("label");s.className="custom-control-label",s.htmlFor="toplace-"+t,s.innerHTML=this.factories[t].label;const n=document.createElement("div");n.className="custom-control custom-radio",n.appendChild(i),n.appendChild(s),e.appendChild(n)}}onClick(t){const e={x:Math.floor(t.offsetX/this.squareSize),y:Math.floor(t.offsetY/this.squareSize)};if(this.currentKey in this.factories)switch(t.buttons){case 1:this.addNode(this.factories[this.currentKey].factory(e)),this.pathFinder.start();break;case 2:this.removeNode(e)}}removeNode(t){const[e]=this.getNode(t);-1!==e&&this.nodes.splice(e,1)}}class v{constructor(t){this.ctx=t,this.components=[],this.lastTime=0;const e=new S({x:26,y:22});t.canvas.width=e.size.x*e.squareSize,t.canvas.height=e.size.y*e.squareSize,t.canvas.addEventListener("contextmenu",t=>{t.preventDefault()}),t.canvas.addEventListener("mousemove",e.onClick.bind(e)),t.canvas.addEventListener("mousedown",e.onClick.bind(e)),this.addComponent(e)}addComponent(t){this.components.push(t)}draw(t){const e=this.ctx,i=t-this.lastTime;e.fillStyle="white",e.fillRect(0,0,e.canvas.width,e.canvas.height),this.components.forEach(t=>{t.draw(i,e)}),this.lastTime=t}}const F=document.getElementById("game-canvas").getContext("2d");if(null!=F){const t=new v(F),e=i=>{t.draw(i),window.requestAnimationFrame(e)};e(0)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,